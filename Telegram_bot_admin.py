import telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes, 
    CallbackQueryHandler,
    ConversationHandler,
    MessageHandler,
    filters
)
from Models import User, TimeSlot, SlotStatus, UserRole
from Services import close_session_of_day, get_unique_slot_dates, get_slots_by_date, get_available_dates_for_new_slots, \
    get_free_slots_by_date, save_new_slot_comment, get_all_events, get_slots_to_close_day, close_single_slot, \
    get_or_create_user, get_all_users, add_new_booking_day, get_closed_days, open_day_for_booking_by_date, \
    get_unclosed_days, make_admin, update_cert_counts, apply_latest_subscription_to_user
from dbcontext.db import Session
from datetime import date, datetime

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ADMIN_MENU, SELECT_DATE_TO_CLOSE, CONFIRM_CLOSE_DATE, VIEW_USERS, SEND_NOTIFICATION = range(5)
ADD_SLOT_DATE, ADD_SLOT_TIME, ADD_SLOT_COMMENT, SELECT_EVENT = range(5, 9)
CLOSE_BOOKING_DATE, CLOSE_BOOKING_TIME, CONFIRM_CLOSE_SLOT = range(9, 12)
SEARCH_BY_PHONE = 20
CLOSE_BOOKING_DATE_USER = 21

def get_admin_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å –¥–µ–Ω—å –¥–ª—è –∑–∞–ø–∏—Å–∏", callback_data='admin_close_day')],
        [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å", callback_data='admin_close_booking')],
        [InlineKeyboardButton("‚≠êÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–¥–∞–ª–µ–Ω–Ω—ã–π –¥–µ–Ω—å", callback_data='admin_open_day')],
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É", callback_data='admin_search_by_phone')],
        [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data='admin_send_notification')],
        [InlineKeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data='admin_view_timetable')],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º", callback_data='admin_add_slot_comment')],
        [InlineKeyboardButton("üìÖ –î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å –¥–ª—è –∑–∞–ø–∏—Å–∏", callback_data='admin_add_day_to_booking')],
        [InlineKeyboardButton("üé´ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data='admin_watch_users')]
    ]
    return InlineKeyboardMarkup(keyboard)

async def show_admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = get_admin_keyboard()
    text = "üìã –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:"

    if update.callback_query:
        try:
            await update.callback_query.edit_message_text(text=text, reply_markup=keyboard)
        except Exception as e:
            await context.bot.send_message(chat_id=update.effective_chat.id, text=text, reply_markup=keyboard)
    else:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=text, reply_markup=keyboard)


async def handle_search_by_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–±–µ–∑ +7, —Ç–æ–ª—å–∫–æ 10 —Ü–∏—Ñ—Ä):")
    return SEARCH_BY_PHONE

async def process_search_by_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    input_text = update.message.text.strip()
    phone_digits = ''.join(filter(str.isdigit, input_text))[-10:]

    tg_user = update.message.from_user
    username_link = (
        f'<a href="https://t.me/{tg_user.username}">@{tg_user.username}</a>'
        if tg_user.username else "–Ω–µ —É–∫–∞–∑–∞–Ω"
    )
    if len(phone_digits) != 10:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ 10 —Ü–∏—Ñ—Ä –Ω–æ–º–µ—Ä–∞.", reply_markup=get_admin_keyboard())
        return SEARCH_BY_PHONE
    users = await get_all_users()
    found_user = next(
        (user for user in users if user.phone and user.phone[-10:] == phone_digits),
        None
    )
    if found_user:
        text = (
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {found_user.phone}\n"
            f"üÜî Telegram ID: {username_link}\n\n"
            f"üí® –ñ–∏–≤–æ–π –ø–∞—Ä: {found_user.count_of_sessions_alife_steam or 0} –∑–∞–Ω—è—Ç–∏–π\n"
            f"üìà –°–∏–Ω—É—Å–æ–∏–¥–∞: {found_user.count_of_session_sinusoid or 0} –∑–∞–Ω—è—Ç–∏–π"
        )

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üëë –°–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º", callback_data=f"admin_make_admin_{found_user.telegram_id}")],
            [InlineKeyboardButton("üóë –°–Ω—è—Ç—å –∑–∞–Ω—è—Ç–∏—è", callback_data=f"admin_clear_cert_{found_user.telegram_id}")],
            [InlineKeyboardButton("üé´ –í—ã–¥–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç", callback_data=f"admin_give_cert_{found_user.telegram_id}")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back_to_admin_menu")]
        ])

        await update.message.reply_text(text, parse_mode="HTML", reply_markup=keyboard, disable_web_page_preview=True)
    else:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.",reply_markup=get_admin_keyboard())

    return ConversationHandler.END

async def handle_close_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    dates = await get_unclosed_days()  # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫

    if not dates:
        await query.edit_message_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    keyboard = []
    for dt in dates:
        date_str = dt  # —ç—Ç–æ —É–∂–µ —Å—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ "YYYY-MM-DD"
        keyboard.append([InlineKeyboardButton(date_str, callback_data=f'admin_select_date_{date_str}')])

    keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='admin_back_to_admin_menu')])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è:",
        reply_markup=reply_markup
    )
    return SELECT_DATE_TO_CLOSE


async def confirm_close_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    date_str = query.data.split('_')[-1]
    context.user_data['selected_date'] = date_str
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f'admin_confirm_close_{date_str}')],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='admin_close_day')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –¥–∞—Ç—É {date_str} –¥–ª—è –∑–∞–ø–∏—Å–∏?",
        reply_markup=reply_markup
    )
    return CONFIRM_CLOSE_DATE

async def execute_close_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    date_str = context.user_data['selected_date']

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ —Å–ª–æ—Ç—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        times = await close_session_of_day(date_str)
        await query.edit_message_text(f"–î–∞—Ç–∞ {date_str} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏. –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {len(times)} —Å–ª–æ—Ç–æ–≤.", reply_markup=get_admin_keyboard())
    except Exception as e:
        await query.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –¥–∞—Ç—ã: {str(e)}", reply_markup=get_admin_keyboard())

async def handle_view_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    users = await get_all_users()
    
    if not users:
        await query.edit_message_text("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–æ 10 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)
    users_list = [f"{user.telegram_id}: {user.phone or '–Ω–µ—Ç –Ω–æ–º–µ—Ä–∞'} ({user.role})" for user in users]
    page_size = 10
    pages = [users_list[i:i + page_size] for i in range(0, len(users_list), page_size)]
    current_page = 0
    
    context.user_data['users_pages'] = pages
    context.user_data['current_page'] = current_page
    
    keyboard = []
    if len(pages) > 1:
        keyboard.append([
            InlineKeyboardButton("‚óÄÔ∏è", callback_data='prev_page'),
            InlineKeyboardButton(f"{current_page + 1}/{len(pages)}", callback_data='page_info'),
            InlineKeyboardButton("‚ñ∂Ô∏è", callback_data='next_page')
        ])
    keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='admin_back_to_admin_menu')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text="–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n" + "\n".join(pages[current_page]),
        reply_markup=reply_markup
    )

async def handle_users_pagination(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    action = query.data
    pages = context.user_data['users_pages']
    current_page = context.user_data['current_page']
    
    if action == 'prev_page' and current_page > 0:
        current_page -= 1
    elif action == 'next_page' and current_page < len(pages) - 1:
        current_page += 1
    
    context.user_data['current_page'] = current_page
    
    keyboard = []
    if len(pages) > 1:
        keyboard.append([
            InlineKeyboardButton("‚óÄÔ∏è", callback_data='prev_page'),
            InlineKeyboardButton(f"{current_page + 1}/{len(pages)}", callback_data='page_info'),
            InlineKeyboardButton("‚ñ∂Ô∏è", callback_data='next_page')
        ])
    keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='admin_close_day')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text="–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n" + "\n".join(pages[current_page]),
        reply_markup=reply_markup
    )

async def handle_send_notification(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    context.user_data['notification_text'] = ""
    
    await query.edit_message_text(
        text="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='admin_back_to_admin_menu')]])
    )
    
    return SEND_NOTIFICATION


async def process_notification_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏ –º–µ–¥–∏–∞ –≤ user_data
    context.user_data['notification_text'] = message.caption or message.text
    context.user_data['photo'] = message.photo[-1].file_id if message.photo else None
    context.user_data['video'] = message.video.file_id if message.video else None

    keyboard = [
        [InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data='admin_send_notification_confirm')],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='admin_back_to_admin_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    preview_text = context.user_data['notification_text']

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç
    try:
        await context.bot.delete_message(
            chat_id=message.chat_id,
            message_id=message.message_id - 1
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –º–µ–¥–∏–∞
    if context.user_data['photo']:
        await message.reply_photo(
            photo=context.user_data['photo'],
            caption=f"–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n{preview_text}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:",
            reply_markup=reply_markup
        )
    elif context.user_data['video']:
        await message.reply_video(
            video=context.user_data['video'],
            caption=f"–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n{preview_text}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:",
            reply_markup=reply_markup
        )
    else:
        await message.reply_text(
            text=f"–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n{preview_text}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:",
            reply_markup=reply_markup
        )

    return SEND_NOTIFICATION

async def send_notification_to_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user = await get_or_create_user(update.effective_user.id)
    if not user or user.role != UserRole.ADMIN:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"
        )
        return ConversationHandler.END

    notification_text = context.user_data.get('notification_text', '')
    photo = context.user_data.get('photo')
    video = context.user_data.get('video')

    if not any([notification_text, photo, video]):
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –î–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ."
        )
        return ConversationHandler.END

    try:
        users = await get_all_users()
        success = 0
        failed = 0

        for user in users:
            try:
                caption = f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{notification_text}" if notification_text else None

                if photo:
                    await context.bot.send_photo(chat_id=user.telegram_id, photo=photo, caption=caption)
                elif video:
                    await context.bot.send_video(chat_id=user.telegram_id, video=video, caption=caption)
                else:
                    await context.bot.send_message(chat_id=user.telegram_id, text=caption)
                success += 1
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
                failed += 1

        result_text = f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n–£—Å–ø–µ—à–Ω–æ: {success}\n–ù–µ —É–¥–∞–ª–æ—Å—å: {failed}"

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ)
        if query and query.message:
            try:
                await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –∞–¥–º–∏–Ω–∫–∏
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=result_text
        )
        await show_admin_menu(update, context)

    finally:
        context.user_data.pop('notification_text', None)
        context.user_data.pop('photo', None)
        context.user_data.pop('video', None)

    return ConversationHandler.END


'''–û–±–∑–æ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è'''
async def handle_view_timetable(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    dates = await get_unique_slot_dates()
    if not dates:
        await query.edit_message_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç.")
        return

    keyboard = []
    for date_str in dates:  # –¥–∞—Ç—ã –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
        callback_data = f"admin_timetable_date_{date_str}"
        keyboard.append([InlineKeyboardButton(date_str, callback_data=callback_data)])
    keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='admin_back_to_admin_menu')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:",
        reply_markup=reply_markup
    )

'''–≤—ã–≤–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è'''
async def show_timetable_for_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    date_str = query.data.replace("admin_timetable_date_", "")
    selected_date = datetime.strptime(date_str, "%Y-%m-%d").date()

    slots = await get_slots_by_date(selected_date)

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ—Ç—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Å—Ç–∞—Ç—É—Å
    slots = [slot for slot in slots if slot.status is not None]
    keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='admin_view_timetable')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if not slots:
        await query.edit_message_text(text=f"–ù–∞ {selected_date.strftime('%Y-%m-%d')} –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç.", reply_markup=get_admin_keyboard())
        return

    lines = []
    for slot in slots:
        event_title = slot.event.title if slot.event else "–ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
        time_str = slot.slot_datetime.strftime("%H:%M")

        if slot.comment:
            lines.append(f"üïí {time_str} | üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {slot.comment} | üéØ {event_title} ")
            continue  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é

        # –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–µ—Ç ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—É—é –ª–æ–≥–∏–∫—É
        if slot.user:
            try:
                chat = await context.bot.get_chat(slot.user.telegram_id)
                full_name = f"{chat.first_name or ''} {chat.last_name or ''}".strip()
                username = f"@{chat.username}" if chat.username else "–Ω–µ —É–∫–∞–∑–∞–Ω"
            except Exception:
                full_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                username = "–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å"
            phone = slot.user.phone if slot.user.phone else "–Ω–µ —É–∫–∞–∑–∞–Ω"
            user_info = f"{username} | üìû {phone}"
        else:
            user_info = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"


        if slot.status == SlotStatus.CONFIRMED:
            status_emoji = "üü¢"
        elif slot.status == SlotStatus.PENDING:
            status_emoji = "üü°"
        elif slot.status == SlotStatus.CANCELED:
            status_emoji = "üî¥"
        else:
            status_emoji = "‚ùì"
        status_text = slot.status.value

        lines.append(f"üïí {time_str} | üë§ {user_info} | üéØ {event_title} | {status_emoji} {status_text}")

    text = "\n\n".join(lines)
    if len(text) > 4000:
        text = "\n\n".join(lines[:30]) + "\n\n‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 30."

    await query.edit_message_text(
        text=f"üìã –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {selected_date.strftime('%Y-%m-%d')}:\n\n{text}",
        reply_markup=reply_markup
    )

'''–∑–∞–ø–∏—Å—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É'''
async def start_add_slot_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    dates = await get_available_dates_for_new_slots()
    if not dates:
        await query.edit_message_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏.")
        return ConversationHandler.END

    keyboard = [
        [InlineKeyboardButton(d.strftime("%Y-%m-%d"), callback_data=f"admin_add_slot_date_{d.strftime('%Y-%m-%d')}")]
        for d in dates
    ]
    keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="admin_cancel_add_slot")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏:", reply_markup=reply_markup)
    return ADD_SLOT_DATE

async def select_add_slot_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    date_str = query.data.replace("admin_add_slot_date_", "")
    context.user_data['add_slot_date'] = date_str

    date_obj = datetime.strptime(date_str, "%Y-%m-%d").date()
    slots = await get_free_slots_by_date(date_obj)

    if not slots:
        keyboard = [
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='admin_back_to_admin_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            f"–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ –¥–∞—Ç—É {date_str}.",
            reply_markup=reply_markup
        )
        return ConversationHandler.END  # –∏–ª–∏ –≤–µ—Ä–Ω–∏ –Ω—É–∂–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å

    keyboard = [
        [InlineKeyboardButton(slot.slot_datetime.strftime("%H:%M"), callback_data=f"admin_add_slot_time_{slot.id}")]
        for slot in slots
    ]
    keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='admin_back_to_admin_menu')])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ {date_str}:",
        reply_markup=reply_markup
    )
    return ADD_SLOT_TIME

async def add_day_to_booking_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user = await get_or_create_user(update.effective_user.id)
    if not user or user.role != UserRole.ADMIN:
        await query.edit_message_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏")
        return

    success, new_date = await add_new_booking_day()
    if success:
        await query.edit_message_text(f"–î–µ–Ω—å {new_date.strftime('%Y-%m-%d')} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏.", reply_markup=get_admin_keyboard())
    else:
        await query.edit_message_text(f"–î–µ–Ω—å {new_date.strftime('%Y-%m-%d')} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ.", reply_markup=get_admin_keyboard())

async def select_event_for_slot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    slot_id = int(query.data.replace("admin_add_slot_time_", ""))
    context.user_data['admin_add_slot_time_id'] = slot_id

    events = await get_all_events()
    if not events:
        await query.edit_message_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.", reply_markup=get_admin_keyboard())
        return ConversationHandler.END

    keyboard = [
        [InlineKeyboardButton(event.title, callback_data=f"admin_select_event_{event.id}")]
        for event in events
    ]
    keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="admin_cancel_add_slot")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏:", reply_markup=reply_markup)
    return SELECT_EVENT

async def cancel_add_slot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_admin_keyboard())
    return ConversationHandler.END

async def handle_event_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    slot_id = context.user_data.get('admin_add_slot_time_id')
    if not slot_id:
        await query.edit_message_text("–û—à–∏–±–∫–∞: —Å–ª–æ—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω.", reply_markup=get_admin_keyboard())
        return ConversationHandler.END

    data = query.data
    event_id = int(data.replace("admin_select_event_", ""))
    context.user_data['admin_selected_event_id'] = event_id

    context.user_data['admin_add_slot_time_id'] = slot_id

    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–ø–∏—Å–∏:")
    return ADD_SLOT_COMMENT

async def save_slot_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"[DEBUG] –í–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {update.message.text}")
    comment = update.message.text.strip()
    slot_id = context.user_data.get('admin_add_slot_time_id')
    event_id = context.user_data.get('admin_selected_event_id')
    print(f"[DEBUG] {slot_id}, {comment}, {event_id}")
    success = await save_new_slot_comment(slot_id, comment, event_id)
    if not success:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_admin_keyboard())
        return ConversationHandler.END

    await update.message.reply_text("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.", reply_markup=get_admin_keyboard())
    return ConversationHandler.END

async def admin_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    if data == "admin_view_timetable":
        await handle_view_timetable(update, context)
    elif data.startswith('admin_timetable_date_'):
        await show_timetable_for_date(update, context)

'''–≤—ã–±–æ—Ä –¥–∞—Ç—ã –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞–ø–∏—Å–∏(–¥–∞—Ç–∞)'''
async def start_close_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    dates = await get_unique_slot_dates()
    if not dates:
        await query.edit_message_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç.")
        return ConversationHandler.END

    keyboard = [
        [InlineKeyboardButton(d, callback_data=f"admin_close_booking_date_{d}")]
        for d in dates
    ]
    keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back_to_admin_menu")])
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=InlineKeyboardMarkup(keyboard))
    return CLOSE_BOOKING_DATE

async def start_close_booking_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    dates = await get_unique_slot_dates()
    if not dates:
        await query.edit_message_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç.")
        return ConversationHandler.END

    keyboard = [
        [InlineKeyboardButton(d, callback_data=f"admin_close_booking_date_{d}")]
        for d in dates
    ]
    keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back_to_admin_menu")])
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=InlineKeyboardMarkup(keyboard))
    return CLOSE_BOOKING_DATE

'''–≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞–ø–∏—Å–∏(–≤—Ä–µ–º—è)'''
async def select_slot_to_close(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    date_str = query.data.replace("admin_close_booking_date_", "")
    context.user_data['close_booking_date'] = date_str

    slots = await get_slots_by_date(datetime.strptime(date_str, "%Y-%m-%d").date())
    if not slots:
        await query.edit_message_text("–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ—Ç —Å–ª–æ—Ç–æ–≤.", reply_markup=get_admin_keyboard())
        return ConversationHandler.END

    keyboard = []
    for slot in slots:
        time_str = slot.slot_datetime.strftime("%H:%M")
        status = "üîí –ó–∞–Ω—è—Ç" if slot.event_id else "üü¢ –°–≤–æ–±–æ–¥–µ–Ω"
        keyboard.append([InlineKeyboardButton(f"{time_str} ({status})", callback_data=f"admin_close_booking_slot_{slot.id}")])

    keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back_to_admin_menu")])
    await query.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç –Ω–∞ {date_str}:", reply_markup=InlineKeyboardMarkup(keyboard))
    return CLOSE_BOOKING_TIME

async def show_all_users_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    users = await get_all_users()

    if not users:
        await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    messages = []
    for user in users:
        username_link = (
            f'<a href="tg://user?id={user.telegram_id}">–ø—Ä–æ—Ñ–∏–ª—å</a>'
            if user.telegram_id else "–Ω–µ —É–∫–∞–∑–∞–Ω"
        )
        messages.append(
            f"üîó –¢–µ–ª–µ–≥—Ä–∞–º: {username_link}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üë§ –†–æ–ª—å: {user.role.value if user.role else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"üí® –ñ–∏–≤–æ–π –ø–∞—Ä: {user.count_of_sessions_alife_steam or 0}\n"
            f"üìà –°–∏–Ω—É—Å–æ–∏–¥–∞: {user.count_of_session_sinusoid or 0}\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
        )
    batch_size = 5
    for i in range(0, len(messages), batch_size):
        chunk = "\n".join(messages[i:i + batch_size])
        await query.message.reply_text(chunk, parse_mode="HTML")

    await query.message.reply_text(
        "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='admin_back_to_admin_menu')]
        ])
    )

async def admin_open_day_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user = await get_or_create_user(update.effective_user.id)
    if not user or user.role != UserRole.ADMIN:
        await query.edit_message_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏")
        return

    closed_dates = await get_closed_days()

    if not closed_dates:
        await query.edit_message_text("–ù–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö –¥–Ω–µ–π –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è.", reply_markup=get_admin_keyboard())
        return

    keyboard = [
        [InlineKeyboardButton(date, callback_data=f"admin_open_day_confirm_{date}")]
        for date in closed_dates
    ]
    keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data='admin_back_to_admin_menu')])

    await query.delete_message()
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
async def admin_open_day_confirm_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    date_str = query.data.replace("admin_open_day_confirm_", "")
    try:
        date_obj = datetime.strptime(date_str, "%Y-%m-%d").date()
    except ValueError:
        await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.")
        return

    success = await open_day_for_booking_by_date(date_obj)

    if success:
        await query.edit_message_text(f"‚úÖ –î–µ–Ω—å {date_str} —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏.", reply_markup=get_admin_keyboard())
    else:
        await query.edit_message_text(f"‚ö†Ô∏è –ù–µ—Ç —Å–ª–æ—Ç–æ–≤ –Ω–∞ –¥–∞—Ç—É {date_str} –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.", reply_markup=get_admin_keyboard())

async def make_user_admin(update: Update, context: ContextTypes.DEFAULT_TYPE, telegram_id: int):
    await make_admin(telegram_id, "ADMIN")
    await update.callback_query.edit_message_text("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–æ–º.", reply_markup=get_admin_keyboard())
async def clear_user_certificates(update: Update, context: ContextTypes.DEFAULT_TYPE, telegram_id: int):
    await update_cert_counts(telegram_id, sinusoid=0, alife_steam=0)
    await update.callback_query.edit_message_text("üîÑ –ó–∞–Ω—è—Ç–∏—è –ø–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—É –æ–±–Ω—É–ª–µ–Ω—ã.", reply_markup=get_admin_keyboard())
async def give_user_certificates(update, context, telegram_id: int):
    success, message = await apply_latest_subscription_to_user(telegram_id)
    await update.callback_query.edit_message_text(message)

'''–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è'''
async def confirm_slot_close(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    slot_id = int(query.data.replace("admin_close_booking_slot_", ""))
    context.user_data['slot_to_close_id'] = slot_id

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="admin_confirm_close_slot")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back_to_admin_menu")]
    ]
    await query.edit_message_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å?", reply_markup=InlineKeyboardMarkup(keyboard))
    return CONFIRM_CLOSE_SLOT

async def execute_close_slot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    slot_id = context.user_data.get("slot_to_close_id")
    msg = await close_single_slot(slot_id)

    await query.edit_message_text(msg, reply_markup=get_admin_keyboard())
    return ConversationHandler.END
async def admin_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "admin_view_timetable":
        await handle_view_timetable(update, context)
    elif data.startswith("admin_timetable_date_"):
        await show_timetable_for_date(update, context)
    elif data.startswith("admin_close_booking_date_"):
        await select_slot_to_close(update, context)
    elif data.startswith("admin_close_booking_slot_"):
        await confirm_slot_close(update, context)
    elif data == "admin_confirm_close_slot":
        await execute_close_slot(update, context)
    elif data == "admin_close_day":
        await handle_close_day(update, context)
    elif data.startswith("admin_select_date_"):
        await confirm_close_date(update, context)
    elif data.startswith("admin_confirm_close_"):
        await execute_close_date(update, context)
    elif data == "admin_back_to_admin_menu":
        await show_admin_menu(update, context)
    elif data == "admin_send_notification_confirm":
        await send_notification_to_users(update, context)
    elif data.startswith("admin_add_slot_date_"):
        await select_add_slot_time(update, context)
    elif data.startswith("admin_add_slot_time_"):
        await select_event_for_slot(update, context)
    elif data.startswith("admin_select_event_"):
        await handle_event_selection(update, context)
    elif data == "admin_cancel_add_slot":
        await cancel_add_slot(update, context)
    elif data.startswith("admin_add_day_to_booking"):
        await add_day_to_booking_handler(update, context)
    elif data.startswith("admin_open_day_confirm_"):
        await admin_open_day_confirm_handler(update, context)
    elif data == "admin_open_day":
        await admin_open_day_handler(update, context)
    elif data == "admin_watch_users":
        await show_all_users_handler(update, context)
    elif data.startswith("admin_make_admin_"):
        telegram_id = int(data.replace("admin_make_admin_", ""))
        await make_user_admin(update, context, telegram_id)
    elif data.startswith("admin_clear_cert_"):
        telegram_id = int(data.replace("admin_clear_cert_", ""))
        await clear_user_certificates(update, context, telegram_id)
    elif data.startswith("admin_give_cert_"):
        telegram_id = int(data.replace("admin_give_cert_", ""))
        await give_user_certificates(update, context, telegram_id)
    else:
        await query.edit_message_text("‚ùóÔ∏è–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

