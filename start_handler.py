# —Ñ—É–Ω–∫—Ü–∏—è run_bot(): –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
# start() –≤—ã–±–æ—Ä –∑–∞–ø—É—Å–∫–∞–µ–º–æ–π –ø–∞–Ω–µ–ª–∏ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∫ –Ω–æ–º–µ—Ä—É
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import ContextTypes

from Services import get_or_create_user
from Telegram_bot_user import *
import asyncio
from Models import *
from scheduler import check_slots_and_nofity_admin, check_multiple_bookings, create_new_workday_slots, \
    configure_scheduler, start_scheduler
from scheduler_handler import button_callback_scheduler

from Telegram_bot_admin import show_admin_menu
from Telegram_bot_admin import setup_admin_handlers

BOT_TOKEN = "8046347998:AAFfW0fWu-yFzh0BqzVnpjkiLrRRKOi4PSc"

BANYA_NAME = "–ñ–∏–≤–æ–π –ø–∞—Ä"
BANYA_ADDRESS = "–ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 15, –≥. –ö—Ä–∞—Å–Ω–æ–∫–∞–º—Å–∫"
CONTACT_PHONE = "+7 (999) 123-45-67"
WELCOME_IMAGE = "–¥–ª—è —Ç–≥.jpg"

def run_bot():
    init_db()

    application = ApplicationBuilder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
        print(f"–û—à–∏–±–∫–∞: {context.error}")
    
    application.add_error_handler(error_handler)
    
    setup_admin_handlers(application)

    configure_scheduler(application)  # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ event loop
    application.post_init = on_startup
    booking_conv_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(handle_procedure_selection, pattern=r'^procedure_\d+$'),
            CallbackQueryHandler(handle_selected_date, pattern=r'^select_date_\d{4}-\d{2}-\d{2}$'),
            CallbackQueryHandler(handle_time_selection, pattern=r'^time_\d+$'),
            CallbackQueryHandler(confirm_booking, pattern='^confirm_booking$'),
        ],
        states={
            SELECT_PROCEDURE: [
                CallbackQueryHandler(handle_procedure_selection, pattern=r'^procedure_\d+$')
            ],
            SELECT_DATE: [
                CallbackQueryHandler(handle_selected_date, pattern=r'^select_date_\d{4}-\d{2}-\d{2}$')
            ],
            SELECT_TIME: [
                CallbackQueryHandler(handle_time_selection, pattern=r'^time_\d+$')
            ],
            CONFIRM_BOOKING: [
                CallbackQueryHandler(confirm_booking, pattern='^confirm_booking$')
            ],
        },
        fallbacks=[
            CallbackQueryHandler(show_main_menu, pattern='^back_to_menu$')
        ],
        per_message=True,
        allow_reentry=True,
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(ask_for_contact, pattern='^share_phone$'))
    application.add_handler(MessageHandler(filters.CONTACT, handle_contact))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(booking_conv_handler)
    application.add_handler(CallbackQueryHandler(button_callback_scheduler))
    application.add_handler(CallbackQueryHandler(confirm_delete_booking, pattern="^confirm_delete_"))
    application.add_handler(CallbackQueryHandler(delete_booking, pattern="^delete_booking_"))

    application.run_polling()


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    tg_id = user.id

    db_user = get_or_create_user(tg_id)

    if db_user and db_user.phone:
        if db_user.role == UserRole.ADMIN:
            # –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
            )
            await show_admin_menu(update, context)
        else:
            await show_main_menu(update, context)
        return

    elif db_user.role == UserRole.ADMIN:
        print("–∞–¥–º–∏–Ω –Ω–∞ –º–µ—Å—Ç–µ")

    # –ò–Ω–∞—á–µ –ø—Ä–æ—Å–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä
    welcome_text = (
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!\n\n"
        f"–≠—Ç–æ –±–æ—Ç –¥–ª—è –æ–Ω–ª–∞–π–Ω-–∑–∞–ø–∏—Å–∏ –≤ –±–∞–Ω—é \"{BANYA_NAME}\" "
        f"–ø–æ –∞–¥—Ä–µ—Å—É: {BANYA_ADDRESS}.\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
    )

    keyboard = [
        [InlineKeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", callback_data='share_phone')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if os.path.exists(WELCOME_IMAGE):
        try:
            with open(WELCOME_IMAGE, 'rb') as photo:
                await update.message.reply_photo(photo=InputFile(photo), caption=welcome_text, reply_markup=reply_markup)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)

async def on_startup(application):
    start_scheduler()